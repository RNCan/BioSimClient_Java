/*
 *  Build file for gradle
 */


plugins {
    id 'com.palantir.git-version' version '3.0.0'
    id 'maven-publish'
    id 'signing'
}


apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'

task sourcesJar(type: Jar) {
	 archiveClassifier = 'sources'
	 manifest {
        attributes("Built-By": "Mathieu Fortin and Jean-Francois Lavoie",
        		   "Specification-Title": "Client for BioSIM Web API sources",
	       		   "Specification-Version": project.version,                   
                   "Specification-Vendor": "CWFC-CCFB",
                   "Implementation-Title": "biosimclient",
                   "Implementation-Version": project.version,
                   "Implementation-Vendor": "CWFC-CCFB",
                   )
    }
   	duplicatesStrategy = DuplicatesStrategy.EXCLUDE		// to avoid duplicate files
    
	into ('/') {
		from files(['./README.md', './LICENSE.md'])			
	}
	
	// include all java files from main sourceset into the jar file (resources are already included)
	from sourceSets.main.java
	from sourceSets.main.resources		
}

java {
  toolchain { 
        languageVersion = JavaLanguageVersion.of(8)
  }
  withSourcesJar()
  withJavadocJar()
}

repositories {
	maven {		// sonatype repository
		url "https://repo1.maven.org/maven2/"
	}
    mavenCentral()
}

println "Using java version " + JavaVersion.current()

sourceSets {
    main {    	
        java {
            srcDirs 'src'            
        }
        
        resources {
			srcDirs= ['src']
			exclude '**/*.java'
		}
		
		output.resourcesDir = "$buildDir/classes/java/$name"
    }

    test {
        java {
            srcDirs 'test'
        }
                
        resources {
			srcDirs= ['test']
			exclude '**/*.java'
		}
		
		output.resourcesDir = "$buildDir/classes/java/$name"
    }               
}

configurations {
	biosimclientImplementation {
		extendsFrom implementation
		description = 'Main implementation'
		canBeResolved = true
	}
}

// make sure to set the compliance to Java 1.8 in the project properties if the Java version is later than 1.8
// make sure to set Java Compiler > Errors Warnings > Deprecated and Restricted API > Forbidden reference to WARNING instead of ERROR
dependencies {
    implementation group: 'io.github.cwfc-ccfb', name: 'repicea', version: '[1.17.0,)'    
	implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '[2.13.1,)'
    testImplementation "junit:junit:4.12"    
}

compileJava {
	project.version= gitVersion() 
	println "Building " + rootProject.name + " " + project.version
	println "Installation directory " + "../externallibraries/" + rootProject.name
}

test {
    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true

    // set heap size for the test JVM(s)
    maxHeapSize = "2048m"
    
    exclude '**/ProductionEnvironmentTest.class'
}

jar {
	manifest {
    	attributes("Built-By": "Mathieu Fortin and Jean-Francois Lavoie",
        		   "Specification-Title": "Client for BioSIM Web API",
	       		   "Specification-Version": archiveVersion,                   
                   "Specification-Vendor": "CWFC-CCFB",
                   "Implementation-Title": "biosimclient",
                   "Implementation-Vendor": "CWFC-CCFB",
                   )
    }
    
	into ('/') {
		from files(['./README.md', './LICENSE.md'])			
	}
	
	// include all java files from main sourceset into the jar file (resources are already included)
	from sourceSets.main.allJava		
}

task integrationTest(type: Test) {
	description = 'Runs the integration tests (unit tests run using the produced JAR file)'
    group = 'verification'
	dependsOn jar
	
	include '**/*.class'
	
	testLogging.showStandardStreams = true
    testClassesDirs = sourceSets.test.output.classesDirs
        
    // set classpath to test classes + test dependencies + JAR
    classpath = project.sourceSets.test.output + configurations.testRuntimeClasspath + files(jar.archiveFile) 
    outputs.upToDateWhen { false }
    mustRunAfter test
    maxHeapSize = "2048m"
}

check.dependsOn integrationTest


task fatJar(type: Jar) {
	group = 'build'
	description = 'Creates a fat jar for distribution'
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE		// to avoid duplicate files
    manifest {
    	attributes("Built-By": "Mathieu Fortin and Jean-Francois Lavoie",
        		   "Specification-Title": "Client for BioSIM Web API",
	       		   "Specification-Version": archiveVersion,                   
                   "Specification-Vendor": "CWFC-CCFB",
                   "Implementation-Title": "biosimclient",
                   "Implementation-Vendor": "CWFC-CCFB",
                   )
    }
    archiveBaseName = 'biosimclient'
	destinationDirectory =  file("../externallibraries/" + rootProject.name)  
    from { sourceSets.main.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }		
}

task deleteInstallFolder(type: Delete) {
  delete "../externallibraries/" + rootProject.name
}

task install(type: Copy) {
	description = 'Copies the output jar to installation folder.'
	group = 'build'
	dependsOn deleteInstallFolder,integrationTest
	from configurations.biosimclientImplementation
	from jar
	into "../externallibraries/" + rootProject.name
}

publishing {
    publications {
        biosimclient(MavenPublication) {
          	from components.java
        	pom {
        		name = 'BioSIM Client'
				group = 'io.github.cwfc-ccfb'
        		description = 'A client for BioSIM Web API'
        		url = 'https://github.com/RNCan/BioSimClient_Java'
        		properties = [
        			packaging: "jar"
	       		]
        		licenses {
        			license {
        				name = 'GNU Lesser General Public License 2.1'
        				url  = 'https://www.gnu.org/licenses/old-licenses/lgpl-2.1.html'
        			}
        		}
        		developers {
        			developer {
        				id = 'matfortin'
        				name = 'Mathieu Fortin'
        				email = 'mathieu.fortin.re@gmail.com'
        			} 
        			developer {
        				id = 'jflavoie'
        				name = 'Jean-Francois Lavoie'
        				email = 'atmailjfl@gmail.com'
        			}
        		}
        		
                scm {
          			connection = 'scm:git:https://github.com/RNCan/BioSimClient_Java'
          			developerConnection = 'scm:git:https://github.com/RNCan/BioSimClient_Java'
          			url = 'https://github.com/RNCan/BioSimClient_Java'
        		}
		     }	
        }
    }
    repositories {
        maven {
            name = 'LocalFile'
            url = "file://${buildDir}/repo"
        }

		maven {
		 	name = 'Sonatype'
		 	credentials(PasswordCredentials)
		 	url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
		}
    }
}

signing {
    sign publishing.publications.biosimclient
}

publishBiosimclientPublicationToLocalFileRepository {
	dependsOn jar
}

 